#!/bin/bash

# Directory to store Pokémon data
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

# Error log file
ERROR_LOG="errors_parallel.txt"
> "$ERROR_LOG"  # Clear old errors

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Store PIDs
declare -A POKEMON_PIDS

# Function to fetch data
fetch_pokemon() {
    local name=$1
    local output="$OUTPUT_DIR/${name}.json"
    local retries=3

    for attempt in $(seq 1 $retries); do
        response=$(curl -s -w "%{http_code}" -o "$output" "https://pokeapi.co/api/v2/pokemon/$name")
        http_code="${response:(-3)}"

        if [[ "$http_code" == "200" ]]; then
            echo "✅ $name: saved to $output"
            return 0
        fi
        echo "Attempt $attempt failed for $name"
        sleep 1
    done

    echo "❌ $name: failed after $retries attempts" >> "$ERROR_LOG"
}

# Launch background processes and collect PIDs
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon" &
    POKEMON_PIDS["$pokemon"]=$!
done

# Wait and monitor all processes
for pokemon in "${!POKEMON_PIDS[@]}"; do
    pid=${POKEMON_PIDS[$pokemon]}

    # Optional: timeout logic (e.g., kill if running more than 10 seconds)
    ( sleep 10 && kill -0 "$pid" 2>/dev/null && echo "⚠️ Killing $pokemon ($pid) for timeout" && kill "$pid" ) &
    
    wait "$pid"
done

echo "🔁 All background fetches completed."
